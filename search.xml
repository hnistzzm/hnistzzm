<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS如何优雅的获取浮点数的整数和小数部分</title>
      <link href="/2022/01/08/JS%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%8E%B7%E5%8F%96%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0%E9%83%A8%E5%88%86/"/>
      <url>/2022/01/08/JS%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%8E%B7%E5%8F%96%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-取整数"><a href="#1-取整数" class="headerlink" title="1.取整数"></a>1.取整数</h3><p>1.parseInt</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3.75</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(num)); <span class="comment">// 3</span></span><br><span class="line">num = -<span class="number">3.75</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(num)); <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><p>用parseInt取整数，结果是没问题的，但是如果<strong>严格来说</strong>，其实<strong>parseInt并不是设计用来取整数的</strong>。</p><blockquote><p><strong>👉🏻 知识点：</strong><code>parseInt(string, radix)`` </code>这个方法是一个将字符串转换为整数的方法，它有两个参数，第一个参数表示要转换的字符串，如果参数不是一个字符串，则将其转换为字符串。第二个参数是基数即进制，默认为10。</p></blockquote><p>所以用 parseInt 方法取整数，有<strong>两个不好的地方</strong>，一是 parseInt 这个函数名，看起来就是将字符串转整数的，用在这里不是很适合，另一个是转字符串有点多此一举，而且肯定会带来性能开销，所以使用 parseInt 虽然方便，但不是最好的办法。</p><p>2.Math方法</p><p>其中 Math.round 是四舍五入的，Math.ceil 是向上取整，Math.floor 是向下取整。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trunc</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">Math</span>.floor(num) <span class="comment">//如果小于0 向上取整</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(num) <span class="comment">//向下取整</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.位操作</p><p>使用位操作方法，在运算过程中会把操作数转为成32位整数，如此，运算后的结果就是整数部分了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3.75</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num | <span class="number">0</span>); <span class="comment">// 3</span></span><br><span class="line">num = -num;</span><br><span class="line"><span class="built_in">console</span>.log(num | <span class="number">0</span>); <span class="comment">// -3</span></span><br></pre></td></tr></table></figure><p>但是这样做也有缺陷</p><blockquote><p>👉🏻 <strong>冷知识</strong>：因为bitwise操作将操作数转为Int32，所以它不能处理超过32位的数值取整，而JavaScript有效整数的范围是53位。</p></blockquote><p>当数值范围超过32位时，它将不能对数值取整，而JavaScript有效整数的范围是53位。</p><p>那么用“|”有什么<strong>好处</strong>呢？如果考虑js文件大小，那么<strong>a|0</strong>与其他方式比较，是最短的方式，所以如果要考虑压缩代码的大小，且明确知道数值范围不会超过32位整数的时候，可以考虑使用这个技巧。</p><h3 id="2-取小数"><a href="#2-取小数" class="headerlink" title="2.取小数"></a>2.取小数</h3><p>1.parseInt+split</p><p>将数值转换成2字符串后切割并转换回数值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">12.76</span></span><br><span class="line"><span class="keyword">const</span> integer = <span class="built_in">parseInt</span>(num.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">const</span> decimal = <span class="built_in">parseInt</span>(num.toString().split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>])<span class="comment">//取小数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;integer&#125;</span>.<span class="subst">$&#123;decimal&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>2.Math.trunc()</p><p>先用<code>Math.trunc(num)</code>取整，然后再与原数相减，就得到了小数部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fract</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num - <span class="built_in">Math</span>.trunc(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fract(<span class="number">3.75</span>)); <span class="comment">// 0.75</span></span><br><span class="line"><span class="built_in">console</span>.log(fract(-<span class="number">3.75</span>)); <span class="comment">// -0.75</span></span><br></pre></td></tr></table></figure><p>3.取模运算</p><blockquote><p><strong>👉🏻 知识点：</strong> JavaScript的取模运算%并不限于整数运算，可以对浮点数取模。</p></blockquote><p>所以，直接将原数对1取模，即可获得小数部分！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">3.75</span> % <span class="number">1</span>); <span class="comment">// 0.75</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">3.75</span> % <span class="number">1</span>); <span class="comment">// -0.75</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写new</title>
      <link href="/2022/01/08/%E6%89%8B%E5%86%99new/"/>
      <url>/2022/01/08/%E6%89%8B%E5%86%99new/</url>
      
        <content type="html"><![CDATA[<p>先用文字描述一下 new 的实现过程</p><ul><li>新定义一个 json 对象</li><li>对象 继承 构造函数的原型链</li><li>将构造函数的 this 指向这个对象</li><li>根据构造函数的返回值类型返回结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">fn,...args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125; <span class="comment">//创建一个新的对象</span></span><br><span class="line">    obj.__proto__ = fn.prototype <span class="comment">//对象继承构造函数的原型链</span></span><br><span class="line">    fn.apply(obj,args) <span class="comment">//将构造函数的this指向这个对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">this</span>.name = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">this</span>.gender = <span class="built_in">arguments</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"> Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;你好呀,我是&quot;</span>,<span class="built_in">this</span>.name);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据测试</span></span><br><span class="line"> <span class="keyword">let</span> test = myNew(Person,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"> test.sayHello()</span><br><span class="line"> <span class="built_in">console</span>.log(test.name);</span><br><span class="line"> <span class="built_in">console</span>.log(test.age);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
